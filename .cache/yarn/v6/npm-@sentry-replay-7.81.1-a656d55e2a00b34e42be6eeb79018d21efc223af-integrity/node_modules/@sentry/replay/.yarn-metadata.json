{
  "manifest": {
    "name": "@sentry/replay",
    "version": "7.81.1",
    "description": "User replays for Sentry",
    "main": "cjs/index.js",
    "module": "esm/index.js",
    "types": "types/index.d.ts",
    "typesVersions": {
      "<4.9": {
        "types/index.d.ts": [
          "types-ts3.8/index.d.ts"
        ]
      }
    },
    "sideEffects": false,
    "repository": {
      "type": "git",
      "url": "git+https://github.com/getsentry/sentry-javascript.git"
    },
    "author": {
      "name": "Sentry"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/getsentry/sentry-javascript/issues"
    },
    "homepage": "https://docs.sentry.io/platforms/javascript/session-replay/",
    "devDependencies": {
      "@babel/core": "^7.17.5",
      "@sentry-internal/replay-worker": "7.81.1",
      "@sentry-internal/rrweb": "2.2.0",
      "@sentry-internal/rrweb-snapshot": "2.2.0",
      "fflate": "^0.8.1",
      "jsdom-worker": "^0.2.1"
    },
    "dependencies": {
      "@sentry-internal/tracing": "7.81.1",
      "@sentry/core": "7.81.1",
      "@sentry/types": "7.81.1",
      "@sentry/utils": "7.81.1"
    },
    "engines": {
      "node": ">=12"
    },
    "_registry": "npm",
    "_loc": "/home/erp_user/.cache/yarn/v6/npm-@sentry-replay-7.81.1-a656d55e2a00b34e42be6eeb79018d21efc223af-integrity/node_modules/@sentry/replay/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <a href=\"https://sentry.io/?utm_source=github&utm_medium=logo\" target=\"_blank\">\n    <img src=\"https://sentry-brand.storage.googleapis.com/sentry-wordmark-dark-280x84.png\" alt=\"Sentry\" width=\"280\" height=\"84\">\n  </a>\n</p>\n\n# Sentry Session Replay\n\n[![npm version](https://img.shields.io/npm/v/@sentry/replay.svg)](https://www.npmjs.com/package/@sentry/replay)\n[![npm dm](https://img.shields.io/npm/dm/@sentry/replay.svg)](https://www.npmjs.com/package/@sentry/replay)\n[![npm dt](https://img.shields.io/npm/dt/@sentry/replay.svg)](https://www.npmjs.com/package/@sentry/replay)\n\n## Pre-requisites\n\n`@sentry/replay` requires Node 12+, and browsers newer than IE11.\n\n## Installation\n\nReplay can be imported from `@sentry/browser`, or a respective SDK package like `@sentry/react` or `@sentry/vue`.\nYou don't need to install anything in order to use Session Replay. The minimum version that includes Replay is 7.27.0.\n\nFor details on using Replay when using Sentry via the CDN bundles, see [CDN bundle](#loading-replay-as-a-cdn-bundle).\n\n## Setup\n\nTo set up the integration, add the following to your Sentry initialization. Several options are supported and passable via the integration constructor.\nSee the [configuration section](#configuration) below for more details.\n\n```javascript\nimport * as Sentry from '@sentry/browser';\n// or e.g. import * as Sentry from '@sentry/react';\n\nSentry.init({\n  dsn: '__DSN__',\n\n  // This sets the sample rate to be 10%. You may want this to be 100% while\n  // in development and sample at a lower rate in production\n  replaysSessionSampleRate: 0.1,\n\n  // If the entire session is not sampled, use the below sample rate to sample\n  // sessions when an error occurs.\n  replaysOnErrorSampleRate: 1.0,\n\n  integrations: [\n    new Sentry.Replay({\n      // Additional SDK configuration goes in here, for example:\n      maskAllText: true,\n      blockAllMedia: true\n      // See below for all available options\n    })\n  ],\n  // ...\n});\n```\n\n### Lazy loading Replay\n\nReplay will start automatically when you add the integration.\nIf you do not want to start Replay immediately (e.g. if you want to lazy-load it),\nyou can also use `addIntegration` to load it later:\n\n```js\nimport * as Sentry from \"@sentry/react\";\nimport { BrowserClient } from \"@sentry/browser\";\n\nSentry.init({\n  // Do not load it initially\n  integrations: []\n});\n\n// Sometime later\nconst { Replay } = await import('@sentry/browser');\nconst client = Sentry.getCurrentHub().getClient<BrowserClient>();\n\n// Client can be undefined\nclient?.addIntegration(new Replay());\n```\n\n### Identifying Users\n\nIf you have only followed the above instructions to setup session replays, you will only see IP addresses in Sentry's UI. In order to associate a user identity to a session replay, use [`setUser`](https://docs.sentry.io/platforms/javascript/enriching-events/identify-user/).\n\n```javascript\nimport * as Sentry from \"@sentry/browser\";\n\nSentry.setUser({ email: \"jane.doe@example.com\" });\n```\n\n### Stopping & starting Replays manually\n\nReplay recording only starts when it is included in the `integrations` array when calling `Sentry.init` or calling `addIntegration` from the a Sentry client instance. To stop recording you can call `stop()`.\n\n```js\nimport * as Sentry from \"@sentry/react\";\nimport { BrowserClient } from \"@sentry/browser\";\n\nconst replay = new Replay();\n\nSentry.init({\n  integrations: [replay]\n});\n\nconst client = Sentry.getCurrentHub().getClient<BrowserClient>();\n\n// Add replay integration, will start recoring\nclient?.addIntegration(replay);\n\n// Stop recording\nreplay.stop();\n```\n\nWhen both `replaysSessionSampleRate` and `replaysOnErrorSampleRate` are `0`, recording will _not_ start.\nIn this case, you can manually start recording:\n\n```js\nreplay.start(); // Will start a session in \"session\" mode, regardless of sample rates\nreplay.startBuffering(); // Will start a session in \"buffer\" mode, regardless of sample rates\n```\n\n\n\n## Loading Replay as a CDN Bundle\n\nAs an alternative to the NPM package, you can use Replay as a CDN bundle.\nPlease refer to the [Session Replay installation guide](https://docs.sentry.io/platforms/javascript/session-replay/#install) for CDN bundle instructions.\n\n<details>\n<summary>Deprecated Replay integration bundle</summary>\nInstalling the replay integration as a secondary integration bundle to the SDK bundle was deprecated in favour of\ncomplete CDN bundles that already contain the replay integration. No need to keep two bundles in sync anymore.\nThe `replay.(min.)js` bundle will be removed in v8 of the JS SDKs.\n\n```html\n<script\n  src=\"https://browser.sentry-cdn.com/7.41.0/bundle.min.js\"\n  crossorigin=\"anonymous\"\n></script>\n<script\n  src=\"https://browser.sentry-cdn.com/7.41.0/replay.min.js\"\n  crossorigin=\"anonymous\"\n></script>\n```\n</details>\n\n## Sessions\n\nA session starts when the Session Replay SDK is first loaded and initialized. The session will continue until 5 minutes passes without any user interactions[^1] with the application *OR* until a maximum of 30 minutes have elapsed. Closing the browser tab will end the session immediately according to the rules for [SessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage).\n\n[^1]: An 'interaction' refers to either a mouse click or a browser navigation event.\n\n### Accessing the Replay Session ID\n\nYou can get the ID of the currently running session via `replay.getReplayId()`.\nThis will return `undefined` if no session is ongoing.\n\n### Replay Captures Only on Errors\n\nAlternatively, rather than recording an entire session, you can capture a replay only when an error occurs. In this case, the integration will buffer up to one minute worth of events prior to the error being thrown. It will continue to record the session following the rules above regarding session life and activity. Read the [sampling](#Sampling) section for configuration options.\n\n## Sampling\n\nSampling allows you to control how much of your website's traffic will result in a Session Replay. There are two sample rates you can adjust to get the replays more relevant to your interests:\n\n- `replaysSessionSampleRate` - The sample rate for replays that begin recording immediately and last the entirety of the user's session.\n- `replaysOnErrorSampleRate` - The sample rate for replays that are recorded when an error happens. This type of replay will record up to a minute of events prior to the error and continue recording until the session ends.\n\nWhen Replay is initialized, we check the `replaysSessionSampleRate`.\nIf it is sampled, then we start recording & sending Replay data immediately.\nElse, if `replaysOnErrorSampleRate > 0`, we'll start recording in buffering mode.\nIn this mode, whenever an error occurs we'll check `replaysOnErrorSampleRate`.\nIf it is sampled, when we'll upload the Replay to Sentry and continue recording normally.\n\n## Configuration\n\n### SDK Configuration\n\nThe following options can be configured on the root level of your browser-based Sentry SDK, in `init({})`:\n\n\n| key                 | type    | default | description                                                                                                                                                                                                                     |\n| ------------------- | ------- | ------- | -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   |\n| replaysSessionSampleRate   | number  | `0`   | The sample rate for replays that begin recording immediately and last the entirety of the user's session. 1.0 will collect all replays, 0 will collect no replays.                                           |\n| replaysOnErrorSampleRate     | number  | `0`   |The sample rate for replays that are recorded when an error happens. This type of replay will record up to a minute of events prior to the error and continue recording until the session ends. 1.0 capturing all sessions with an error, and 0 capturing none.\n\n### General Integration Configuration\n\nThe following options can be configured as options to the integration, in `new Replay({})`:\n\n| key                 | type    | default | description                                                                                                                                                                                                                     |\n| ------------------- | ------- | ------- | -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   |\n| stickySession       | boolean | `true`  | Keep track of the user across page loads. Note a single user using multiple tabs will result in multiple sessions. Closing a tab will result in the session being closed as well.                                               |\n\n\n### Privacy Configuration\n\nThe following options can be configured as options to the integration, in `new Replay({})`:\n\n| key              | type                     | default                                 | description                                                                                                                                  |\n| ---------------- | ------------------------ | --------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| maskAllText      | boolean                  | `true`                                  | Mask _all_ text content. Will pass text content through `maskFn` before sending to server.                                                   |\n| maskAllInputs    | boolean                  | `true`                                  | Mask values of `<input>` elements. Passes input values through `maskInputFn` before sending to server.                                       |\n| blockAllMedia    | boolean                  | `true`                                  | Block _all_ media elements (`img, svg, video, object, picture, embed, map, audio`)                                                           |\n| maskFn           | (text: string) => string | `(text) => '*'.repeat(text.length)`     | Function to customize how text content is masked before sending to server. By default, masks text with `*`.                                  |\n| block            | Array<string>            | `.sentry-block, [data-sentry-block]`    | Redact any elements that match the DOM selectors. See [privacy](#blocking) section for an example.                                           |\n| unblock          | Array<string>            | `.sentry-unblock, [data-sentry-unblock]`| Do not redact any elements that match the DOM selectors. Useful when using `blockAllMedia`. See [privacy](#blocking) section for an example. |\n| mask             | Array<string>            | `.sentry-mask, [data-sentry-mask]`      | Mask all elements that match the given DOM selectors. See [privacy](#masking) section for an example.                                        |\n| unmask           | Array<string>            | `.sentry-unmask, [data-sentry-unmask]`  | Unmask all elements that match the given DOM selectors. Useful when using `maskAllText`. See [privacy](#masking) section for an example.     |\n| ignore           | Array<string>            | `.sentry-ignore, [data-sentry-ignore]`  | Ignores all events on the matching input fields. See [privacy](#ignoring) section for an example.                                            |\n\n#### Deprecated options\nIn order to streamline our privacy options, the following have been deprecated in favor for the respective options above.\n\n| deprecated key   | replaced by | description |\n| ---------------- | ----------- | ----------- |\n| maskInputOptions | mask        | Use CSS selectors in `mask` in order to mask all inputs of a certain type. For example, `input[type=\"address\"]` |\n| blockSelector    | block       | The selector(s) can be moved directly in the `block` array. |\n| blockClass       | block       | Convert the class name to a CSS selector and add to `block` array. For example, `first-name` becomes `.first-name`. Regexes can be moved as-is. |\n| maskClass        | mask        | Convert the class name to a CSS selector and add to `mask` array. For example, `first-name` becomes `.first-name`. Regexes can be moved as-is. |\n| maskSelector     | mask        | The selector(s) can be moved directly in the `mask` array. |\n| ignoreClass      | ignore      | Convert the class name to a CSS selector and add to `ignore` array. For example, `first-name` becomes `.first-name`. Regexes can be moved as-is. |\n\n## Privacy\nThere are several ways to deal with PII. By default, the integration will mask all text content with `*` and block all media elements (`img, svg, video, object, picture, embed, map, audio`). This can be disabled by setting `maskAllText` to `false`. It is also possible to add the following CSS classes to specific DOM elements to prevent recording its contents: `sentry-block`, `sentry-ignore`, and `sentry-mask`. The following sections will show examples of how content is handled by the differing methods.\n\n### Masking\nMasking replaces the text content with something else. The default masking behavior is to replace each character with a `*`. In this example the relevant html code is: `<table class=\"sentry-mask\">...</table>`.\n![Masking example](https://user-images.githubusercontent.com/79684/193118192-dee1d3d8-5813-47e8-b532-f9ee1c8714b3.png)\n\n### Blocking\nBlocking replaces the element with a placeholder that has the same dimensions. The recording will show an empty space where the content was. In this example the relevant html code is: `<table data-sentry-block>...</table>`.\n![Blocking example](https://user-images.githubusercontent.com/79684/193118084-51a589fc-2160-476a-a8dc-b681eddb136c.png)\n\n### Ignoring\nIgnoring only applies to form inputs. Events will be ignored on the input element so that the replay does not show what occurs inside of the input. In the below example, notice how the results in the table below the input changes, but no text is visible in the input.\n\nhttps://user-images.githubusercontent.com/79684/192815134-a6451c3f-d3cb-455f-a699-7c3fe04d0a2e.mov\n\n## Error Linking\n\nCurrently, errors that happen on the page while a replay is running are linked to the Replay,\nmaking it as easy as possible to jump between related issues/replays.\nHowever, please note that it is _possible_ that the error count reported on the Replay Detail page\ndoes not match the actual errors that have been captured.\nThe reason for that is that errors _can_ be lost, e.g. a network request fails, or similar.\nThis should not happen to often, but be aware that it is theoretically possible.\n\n## Manually sending replay data\n\nYou can use `replay.flush()` to immediately send all currently captured replay data.\nWhen Replay is currently in buffering mode, this will send up to the last 60 seconds of replay data,\nand also continue sending afterwards, similar to when an error happens & is recorded.\n",
    "licenseText": "Copyright (c) 2022 Sentry (https://sentry.io) and individual contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@sentry/replay/-/replay-7.81.1.tgz#a656d55e2a00b34e42be6eeb79018d21efc223af",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@sentry/replay/-/replay-7.81.1.tgz",
    "hash": "a656d55e2a00b34e42be6eeb79018d21efc223af",
    "integrity": "sha512-4ueT0C4bYjngN/9p0fEYH10dTMLovHyk9HxJ6zSTgePvGVexhg+cSEHXisoBDwHeRZVnbIvsVM0NA7rmEDXJJw==",
    "registry": "npm",
    "packageName": "@sentry/replay",
    "cacheIntegrity": "sha512-4ueT0C4bYjngN/9p0fEYH10dTMLovHyk9HxJ6zSTgePvGVexhg+cSEHXisoBDwHeRZVnbIvsVM0NA7rmEDXJJw== sha1-plbVXioAs05Cvm7reQGNIe/CI68="
  },
  "registry": "npm",
  "hash": "a656d55e2a00b34e42be6eeb79018d21efc223af"
}